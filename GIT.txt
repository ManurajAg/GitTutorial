--------- GIT ---------------

> Git is a version control system(VCS)
> Developed by LINUX by Linus Torvalds
> Created for development of Linux Terminal
> VCS is used to record changes made to file made over time
> It gives us the ability to revert the files or set of files you made changes in
> There are 3 types of Version Control System :- 
	-> Local Version Control System :- 
		> This method is used to copy files into another directory
		> They keep files with timestamp, suppose we have a file x.txt and we made some changes to it then we can use local VCS to make a backup of file in some other directory before making changes
		> Used when only one developer is working
	-> Centralized Version Control System :- 
		> Used to collaborate with other developers. It has a single server that have all versioned file and number of clients who can take file from central place
		> Subversion and Preforce are its examples
		> Difference between this and local one is that , this one has a centralized server
		> Problem :- If central server has problem, no one can access file
	-> Distributed Version Control System :- 
		> In this clients can access project's whole history(in above one only latest version of file can be accessed)
		> Every clone is full backup


-------------------------------- Configuration --------------------------------

> Git performs most of operations in local files and local resources

> 3 States in GIT :- Modified, Stages, commited
	1. Modified :- Means that file is changed but changes are not committed yet
	2. Staged :- Means that you have marked the modified file in its current version to go into your next commit snapshot
	3. Commited :- Data is safely stored in your local database

	NOTE :- So suppose we have a git repository, now we can read our project from our repo and when we make changes, we can stage a file, and after that when we commit all the files staged will be commited and our project will be modified

> Working Directory :- Working tree is a single checkout of one version of project. These files are pulled out of compressed database in GIT directory and placed on disk for you to use or modify. Simply, it is the current project we are working on

> Staging AREA :- It is the area which contains information about what will go into our next commit. Technically it is named as index

> Repository AREA :- It is basically where git stores metadata and object database for your project.

> GIT Workflow :- We modify our files in our working tree, we can selectively stage those changes which we want to be the part of our next commit, and then we commit which takes files in the staging area and snapshot them permanently in your GIT Directory

> GIT configuration levels and Setting username and email address in git :- 
	-> We need to do this so that git can identify who has made changes to file
	-> Git has different configuration files to determine the behaviour, it has multiple levels of configuration :- 
		> Repository/Project Level (Local)  (config file can be found at :- repository/.git/config)
		> User Account (Global Level) (config file can be found at :- Users/manua/.gitconfig)
		> System Level (Git Installation) (config file can be found at :- usr/local/etc/gitconfig)

	Git looks for the email and username firsly at repo level, if not found then at user account level and if it is not found there too then it looks at system level

	-> Set config Command :- git config --anyLevel user.email value
		> Setting user.email at local level :- git config --local user.email your_email_address
		> Setting user.name at local level :- git config --local user.name your_name
		
	-> To check current configured user :- git config user.email
	-> Check complete git config :- Git config --list --show-origin  (This command will give you information about all the configured users)

	-> Remove a specific setting for a specific level of config :- Git config --anyLevel --unset user.name
	-> Remove specific section :- Git config --anyLevel --remove-section user


	-> You can also change configuration in .git folder created in project repository by the command "git init". That .git folder has config file in it which can be directly edited

-> NOTE :- To see main command :-  git help
	   To see all commands :- git help -a 	(Press q to exit from it)
	   To get help with specific command lets say for init :- git help init

-> NOTE :- As soon as we use git init, one branch is created that is called as master branch

---------------- Initialize, Add, Stage, Commit and Changes ----------------------

-> "git status" command gives information about our current branch, our commits and info about staged files

-> Git add :-  
	> Untracked file :- File that has been recently created/modified/deleted but not yet staged is untracked file, to move it to Staging area we use "git add fileName.extenstion"  
	> On using git add command our file is moved to staging area that is, it will be saved to git repo in our next commit
	> To remove file from staging area :- git rm --cached <file>

-> git commit :- 
	> To commit the files in staging area to git repository
	> When you do git commit then you will have screen to enter message where you can add information about commit. To escape from this screen press esc and then :wq
	> To do git commit with message :- git commit -m "YOUR MESSAGE"  , this will not show that screen in second point

> Saving changes :- 
	-> Suppose we have an index.html file in our project folder:- First of all we used "git init" to intitialize git folder, now we use "git add index.html" and then "git commit". This saved our index.html to git repo. Now suppose we make some change to index.html (We can use vim editor "vim index.html" and then if we do "git status" then it will show index.html as modified. Now we will again do "git add index.html", and now if we do "git status" , it shows changes to be commited. Then we finally do :- git commit -m "first change"  . Now our first change is committed too.
	-> To see our commits :- git log
		> HEAD in this is nothing just the pointer to current branch
		> It will show when commit was made and by whom
	

------------------ Diff Command -------------------------

> Diff command is used in git to track the diff. between the changes made on a file
> It takes 2 inputs and reflects differences between them
> To know difference between working area and staging area :- git diff
> To know difference between staging area and repository area :- git diff --staged
> To know difference between working area and repository area :- git diff head

-> NOTE :- We can use vi fileName.extension to create file

---------------- How Git stores data ----------------

> Git stored data in form of object (key and values)
> Value is contents of file
> You give the value and it will calculate a key for it
> Key value is calculated with SHA1 algo, It gives us 20 byte hexadecimal digit
> Not only contents, directories etc have their own SHA1
> Every object has its own SHA1

> This will show us the encoded content :-
	 git cat-file yourHashCodeValue -p

 Suppose we get this :- 990acb13ac3b4faf9e39aa7f0fb8c33093060a17 from our commit
 and if we do :- git cat-file 990acb13ac3b4faf9e39aa7f0fb8c33093060a17 -p ,then this will return us another hash value (f561cdc727b57e5645697231b7a17a131213b4bf) and message of our commit

	Now if we run git cat-file f561cdc727b57e5645697231b7a17a131213b4bf -p , this will return us channel.txt name(It is the file which we created) and another hash value (03f7b124fb1a840d5268d21f95a7d0bef6f0e07c)

	And if we run git cat-file 03f7b124fb1a840d5268d21f95a7d0bef6f0e07c -p ,this will return us content of channel.txt

	NOTE :- When you will go to object folder in .git folder you will find three folders named 99, f5, 03 , these 3 folders name are on the basis of first 2 digit of hash value

---------------- Rename and Restore Files ---------------

> Suppose we have a file channel.txt and we rename it to channel.html using command :- "mv channel.txt channel.html", now if you check "git status" you will notice that it shows that channe.txt is deleted and channel.html is new untracked file, but in reality we know that no file is deleted it is only renamed. Now if we add channel.html to track(using git add channel.html) and then if we add channel.txt and now if we check "git status", it will show that renamed : channel.txt -> channel.html and then we can commit changes

> But if we use "git mv channel.txt channel.html" instead of "mv channel.txt channel.html" it will automatically rename, we will not need to add and we can simply commit.

> Restore :- 
	> To remove a file from a staging area :- git restore --staged fileName.extension
	> If we want to revert changes what we have did in working area :- git restore fileName.extension

--------------------- Branches in GIT ------------------

> As we do "git init" main branch is intialized which is known as master
> When we need to create branch :- Suppose there are multiple developers involved in project, and one team is working on the some feature, if that team directly changes the code on master branch, then if some issue came then whole code will get affected, thus we will create a separate branch for that feature and when feature will be completely developed and tested then we can combine this branch with master branch
> To create a branch :- git branch branchName
> To create a branch and move to it :- git checkout -b branchName
> To move to specific branch :- git checkout branchName
> To get names of all branches :- git branch
> Renaming branch :- First go to that branch and then "git branch -m newName"
> Delete Branch :- git branch -d branchName
> NOTE :- If we made some changes to branch which are not yet committed and then we try to delete that branch, it will give error. To delete such branchs use :- "git branch -D branchName"


> Eg :- Suppose we have our working directory named as EcommerceProject, it has a master branch. We created index.txt in it and committed it. Now we create a new branch login_feature using "git checkout -b login_feature" and now in this branch we create new folder login and in that we created login.txt and committed it. Now if we will perform ls command on login_feature branch we will see index.txt and login folder. But if we move to master branch using "git checkout master" then it will show us only index.html. It is because, login feature is implemented in different branch. And now if we perform some commit in master branch that will not be visible in login_feature branch

> Branches are in heads folder in refs folder which is in .git folder

> How branches access data :- When we use "cat .git/refs/heads/branchName" we will see a hash code which basically represents the last commit hashcode. And we know that commits are stored in object folder. HEAD gives information about current branch in which we are. HEAD is present in .git folder

> MERGING 2 BRANCHES :- 	
	-> git merge branchName
	->  When feature development is created we can merge 2 branches. Suppose we have completed login_feature functionality then we can go to master branch and use "git merge login_feature" then our master will have all functionality implemented in login_feature

	-> Fast Forward Merge :- When there is no new commit in master branch between the timeperiod of when login_feature branch was created and and when it was merged with master, then Fast Forward Merge happens.  Eg :- Suppose we created a branch login_feature and moved to it and performed some commit and then we move to master and merge these 2 then it is fast forward merge

	-> Recursive Merge :- When there exists new commits in master branch between the timeperiod of when login_feature branch was created and and when it was merged with master, then Recursive Merge happens. Eg :- Suppose we created a branch login_feature and moved to it and performed some commit and then we move to master and perform some commit to master branch and now if we merge these 2 then it is recursive merge

	-> Merge Conflict :- 
		> Suppose we changed a file in master branch and we changed same file in other branch, then conflict will raise, it will ask us to decide which one to merge
		> So when we will do "git merge branchName" it will show us automatic merging failed, and now if we check "git status" it will show unmerged paths
		> Now to resolve conflict, open the file causing merging error, in that you will be able to see the changes from different branches, you can keep the change which you want and erase other ones manually.
		> After removing others we can do "git add ." and then "git commit" and our files will be merged

		> We can abort merging by git merge --abort

------------------ Git Rebase -------------

> It is alternative of merging
> It updates one branch by applying commits of one branch on top of commits of another branch
> It is used to clean up our local commit history.
> Merge preserves history while rebase doesn't preserve history
> Rebase shouldn't be used when branch is public and shared to all developers
> It can be used :- 
	-> when we want to clean up our commit history before sharing our branch
	-> Pulling changes from another branch without merge

> Command :- git rebase branchName

----------- Interactive Rebasing --------------

> To combine multiple commits into single commit

> Suppose we created a new branch called as new_feature and now while developing that feature we performed multiple commits like starting, bug fixes and later completion commit, now when we want to merge we don't want multiple commits to be merged, we want to combine all those commit as one and then merge, for this interactive rebasing is used. 

> Command :- git rebase -i branchName

> Once we use above command then it will show us the commits with which we can perform different ops like pick/squash/reword etc. 

------------------ Ammend ---------------------

> Modifying Commit
> Suppose we are working on some file index.txt and we made a commit for it, but after that we encountered that it has some issue, so now we have 2 options, first is we create a new commit and second is we modify old commit.
> Creating new commit is already discussed
> To Modify our latest commit :- git commit --ammend 
> NOTE :- Use this only when ur data is in local system, if it is public it can result in loss of data

---------------- GIT Cherry Pick ----------

> It is used when we want to apply particular commit from one branch into another branch
> It is used if we don't want to merge the whole branch and want only some of commits
> It can cause duplicate commits
> Suppose we have a feature and it has versions 1.0, 2.0, 3.0, now while working on 3.0 we came to know about a bug which existed even in 1.0 and 2.0 so we fixed that bug and made a commit in 3.0 but now we want that bug to be fixed in 1.0 and 2.0 too, so for that we can use that same commit , switch to that version branch and use "git cherry-pick hashCodeOfCommit" and that commit will be made to other branch

> Command :- git cherry-pick hashCodeOfCommit

----------- GIT Head -------------

> When we are working we only checkout one branch at a time, this is called head branch
> Git makes note of this branch and stores it in .git/Head as reference for the path of branch
> Head is basically reference to branch. It can also reference to commit.
> If head points to specific commit then it is called as detached head
> Working with detached HEAD :- Suppose we have a hash value 23sase and our head is pointing to this, and now we do 2 more commits, now if we move to master branch and now if we want to access those 2 commits, we can do so only via their hash value :- "git checkout hashVal", if we don't know their hash value we will not be able to access them. One another way is that after doing those 2 commits and before switching to master, we can create a branch, so those 2 commits will be in that branch which can be later merged/used.

--------------- GIT Reset --------------------

> Undoing Changes
> It is complex as it does different things in different context
> If we see commit, merge, rebase, these commands do not explicity move the branch, they are moved as a side effect of creating new commit. So to explicitly move branch we use reset
> Options in reset :- 
	-> --hard :- Moves the files both to working area and staging area
	-> --mixed :- Moves the files only to staging area
	-> --soft :- Does not move the files
> Reset moves the current branch and optionally copies the data from repositories to working or staging areas
> To move head to some commit :- git checkout hashValOfCommit
> To move branch to some commit :- git reset hashValOfCommit

> Eg :- Suppose we created index.txt file and commited it and later on we created feature.txt file and committed it too but now we came to know that feature.txt is not needed right now so we can move to index.txt file commit(suppose its hashcode is 32sfg2) :- git reset 32sfg2 --hard , so this will remove feature.txt file from our working directory and staging area

> We can use reset to move files from staging area to unstaged area :- git reset head --mixed


----------------- Git Stash --------------------

> Sometimes we want to switch branch, but we are working on an incomplete part of current project, and we don't want to make a commit of half done work. Git Stash will allow you to do so 
> When we try to switch branch without committing changes, then 2 things happen :- 
	1. Git will not allow to switch the branch and asks to cmiit or stash the changes
	2. Switches to the branch carrying changes

> So stash allows us to change branch without committing the incomplete code
> Stash means to store something in hidden place

> Eg :- Suppose we have 2 branches master and feature, so if we create index.txt in master and commit it and then create feature branch, then feature branch will have index file and 1 commit, and now if we change to feature branch and create feature.txt there, then if we move to master branch it will allow us, and now if we check git status in master branch we will see feature.txt as modified. Now move to feature branch and commit feature.txt. This thing proved the second point that switches to branch carrying changes.
Now move to master branch and do some changes in index.txt file and then move to feature branch and do some changes in its index.txt file too, now without committing if u try to switch branch then it will show error, as git automatically identified that changes has been made in index.txt file in master branch too, thus changes in feature branch will be lost, so it will ask us to either commit or stash

> Command :- git stash		//Modifies and creates new stash
> To save to stash with custom name :- git stash save anyName
> To see the list of stash :- git stash list
> To retrieve the latest stash change:- git stash pop 	//it will remove the change from stash and the incomplete changes made will be visible again 
> If we want that item should be staged again but should not be removed from stash list then use :- git stash apply
> To check changes in latest stash :- git stash show -p		(You can also use git stash show stashHashCode -p to see change of particular stash)

> To delete latest stash :- git stash drop		(You can also use git stash drop stashHashCode to delete particular stash)

> To delete all stash :- git stash clear

> To create stash changes into separate branch :- git stash branch branchName  			(You can also use git stash branch branchName stashHashCode to apply stash changes to particular branch)