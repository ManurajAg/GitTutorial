---------------- GITHUB -------------------

> Cloud Hosting Platforms for git repositories 
> Git is a version control system that runs on local machine, you don't need internet and account to use it, while github allows to host repo in cloud and is easier to collaborate with other people.
> Alternatives to github :- bitbucket, gerrit
> Github was founded in 2008, it is largest host of source code
> Github is mainly used for collaboration. It is also for open source project

----------------- GIT Clone ------------------

> To work with the repositories hosted in github we need to get the local copy into the computer
> For that we need URL of repository
> Command :- git clone urlOfRepository
> Git will retrieve all files associated with it and will copy them to local machine
> In addition to that git initializes a new repo on your machine giving you access to the full history of cloned project
> You should not clone repository in an already existing git repository(that is the folder in which you are cloning should not have .git folder which means it is not a git repo)
> Eg :- Suppose you want to clone https://github.com/JDStraughan/html5-snake.git, so you will go to a folder and open terminal/git bash in it and do "git clone https://github.com/JDStraughan/html5-snake.git" , this will fetch the code from github repo in a folder and you can access it in your local machine and modify as per your need	

> You don't need permission to clone code from github if it is public but to push changes you need to have permissions

------------ Github with ssh ------------------

> We can connect to github using 2 methods :- 
	1. Using https :- If we are getting data from github using https then it will always prompt us for username and password in order to check user authentication
	2. Using ssh :- It does not prompt you everytime. It authenticates user on the basis of key stored. Using ssh protocol you can connect and authenticate to remote servers and services. With ssh keys you can connect to github without supplying your username and personal access token at each visit

> To implement ssh keys in system :- 
	1. Create key using SSH key pair :- ssh-keygen -t ed25519 -C "youremail@example.com"
	2. Ensure ssh-agent is running :- eval `ssh-agent -s`
	3. Add SSH key to ssh agent :- ssh-add ~/.ssh/id_ed25519
	4. Go to github profile and add ssh key pair in settings(Settings -> SSH and GPG Keys -> New SSH Keys -> Enter key(Key is available at location recieved from command in 3rd point)-> Add key)
	NOTE :-When you will go to location you will see one private key and one public key, public key has extension .pub, open public key in notepad
	5. To check whether we are authenticated or not :- ssh -T git@github.com

	NOTE :- ed25519 is an algorithm

------------ Creating Repo in Github --------------

> How do I get my code on github :- 
	1. We have an existing repo :- If we have an repo locally then create a new repo on github, connect your local repo(add a remote), push ur changes to git
	2. Start from scratch :- If no local repo, then create new repo on github, clone it to your machine, do some work locally and push changes to github

--------- Connecting Github repo to local machine ----------

> To connect our local repo to github repo. we need to tell our local machine about remote repo, for that we need to setup destination in local repo. These destinations are referred to as remotes in git. Each remote is simply a url where a hosted repository lives

> Viewing Remotes :- 
	-> Command :- git remote			//if no output then no remote repo is added
	-> This command displays list of remotes(repositories on github)
	-> To check that whether our local repo is linked with some github repo (remote repo) or not. 
	

	NOTE :- git remote -v will tell url also

> Adding Remotes :- 
	-> Command :- git remote add origin urlOfRepo
	-> Origin is short name for the url, that means whenever I use name origin, I am referring to particular github url like an alias name
	-> Origin is just conventional git remote name for a URL. When we clone github repo, the default name setup for us is called origin. We can change it if we want. 
	-> For eg :- we can also do "git remote add myUrl urlOfRepo", so this means that whenever myUrl is used we are referring to this github repo. Commonly used name is origin.

> Renaming Remotes :- 
	-> Command :- git remote rename oldName newName

> Removing Remote :- 
	-> Command :- git remote remove nameOfRemote


------------------ Pushing to github repo --------------------

NOTE :- In 2020, github renamed master branch as main , and that's why we do "git branch -m main" so that we can rename master branch to main

> Suppose we created a new repository in Github named GitPractice :- 
	Then we have ;- 
	1. create a new repository from command line :- 
		git init
		git add Readme.md
		git commit -m "First commit"
		git branch -M main
		git remote add origin https://github.com/ManurajAg/GitPractice.git
		git push -u origin main

	2. push an existing repository from command line :- 
		git remote add origin https://github.com/ManurajAg/GitPractice.git
		git branch -M main
		git push -u origin main

NOTE :- "git push" can push only one branch at a time

NOTE :- If we create new repo and then :- "git push origin master" then, it will first create master branch and then push files to it, and again if we push something to master branch, then it will get updated. Thus we can say that when we use "git push origin master" we are actually creating a new branch named master and pushing changes to it.

NOTE :- We can also push the changes in any branch to different branch in github. Eg :- git push <remote> <local-branch>:<remote-branch>. Lets take an example suppose you create a file index.txt in master branch in local PC and then push it to github repo's master branch, now in your local computer you created a new_branch and created branch.txt in it, and again push changes to github using :- git push origin new_branch (This will create new_branch in github repo) , now again in local PC we made a file name.txt and committed it, and now if we do :- "github push origin new_branch:master", This command will push changes made in new_branch to master branch of github repo. Kindly note that these changes will not be visible in new_branch of github repo.

> What is push -u :- 
	-> -u option allows us to set upstream of branch we are pushing
	-> It can be seen as link between local branch and branch in github
	-> "git push -u origin master", This command sets up the upstream of local master branch so that it tracks the master branch on origin repo.
	-> Eg :- Suppose we have created a master branch in local pc, and if we do "git push -u origin master", then this will link master branch of local pc to master branch of github repo. now instead of using "git push origin master" you can simply use "git push".
	-> NOTE :- Suppose we didn't perform "git push -origin master", and if we do "git push", it will automatically setup link between that branch in local pc and github repo.(if branch is not in repo, it will create it automatically)

--------------- Remote Tracking ----------------

> Suppose you cloned a git repository which has some initial commits, so currently if you will do "git log", you will see :-

	commit 0d0e2b420bfa0eaf332553b67b1397314bc60005 (HEAD -> main, origin/main, origin/HEAD)
	Author: ManurajAg <93424763+ManurajAg@users.noreply.github.com>
	Date:   Tue Mar 12 22:49:08 2024 +0530
	
	    Initial commit
	Here, main refers to local, while origin/main refers to github repo.
	Now suppose we created a file in our local system and committed it and then we do "git log", we will see :- 
	commit 3fd0e9727622941b102f6d1a7749fe5dddf22594 (HEAD -> main)
	Author: ManurajAg <manu.ag002@gmail.com>
	Date:   Tue Mar 12 22:53:54 2024 +0530

	    Created Name file

	commit 0d0e2b420bfa0eaf332553b67b1397314bc60005 (origin/main, origin/HEAD)
	Author: ManurajAg <93424763+ManurajAg@users.noreply.github.com>
	Date:   Tue Mar 12 22:49:08 2024 +0530

	    Initial commit

	Now you can see that origin/main which points to github repo is still on initial commit, while main which points to local repo is now moved to another commit.

	Now if we do "git push" and then "git log"
	commit 3fd0e9727622941b102f6d1a7749fe5dddf22594 (HEAD -> main, origin/main, origin/HEAD)
	Author: ManurajAg <manu.ag002@gmail.com>
	Date:   Tue Mar 12 22:53:54 2024 +0530

	    Created Name file

	commit 0d0e2b420bfa0eaf332553b67b1397314bc60005
	Author: ManurajAg <93424763+ManurajAg@users.noreply.github.com>
	Date:   Tue Mar 12 22:49:08 2024 +0530

	    Initial commit

	As you can see both main and origin/main again point to same commit
	NOTE :- To see the name of remote branches available :- git branch -rk

> Whenever you clone a github repository, even though it can have many branches but it will clone only the default branch(Suppose we have main, branch1,branch2,branch3 at github repo and if we clone it then only main will be clone to local repo)

> To see all the branches available at github repository :- git branch -r
> To move to remote branch :- git checkout origin/branchName		//Note :- This will not generate any branch in local system
> git switch branchName :- When we run this command, first switch will check that whether there is any branch with given name in local repo, and if it is not found then it will check on remote(github repo) and if found there, it will automatically create same branch in local repo and link it with one in remote. Note :- If branch is not found then error will be given





------------------------ Git Fetch --------------------------

> Suppose we are working on project with other collaborators on github repo. One of your teammate pushed up the changes to master branch but your local repo doesn't know about the changes. So to get this we use "git fetch" & "git pull"

> Git fetch and pull get those changes from github repo to your local repo

> Git fetch will collect all the updated data from remote repository(Github repo) and move it to your local repository. In this changes are not automatically integrated into our working files

	Command :- git fetch <remote>

	Eg :- git fetch remote , this will fetch all changes from origin remote repository(all branches, history). Only updates tracking branches

	-> We can also fetch specific branch :- git fetch <remote> <branch>

	Eg :- git fetch origin master, this will retrieve latest info from master branch on remote repo. Now clone this remote repo in your PC, once cloned check "git status", you will see :- Your branch is up to date with 'origin/main'. Now go to remote repo and create index.txt in main branch and login.txt in login branch. Now if you will try to check "git status" in your local repo then you will see :- Your branch is up to date with 'origin/main'. It is because our local repo is not aware of changes, so to get aware of updates we will do "git fetch", and now if we do "git status" :- Your branch is behind 'origin/main' by 1 commit, and can be fast-forwarded. But if we do "git log" we will not be able to see any new commit and also if we do "ls" we will not be able to see index.txt in our main branch (it is because "git fetch" doesn't put data in your working directory, for that you need "git pull"). Now if we do "git switch login" , it will create new branch "login" in local repo and will also map it to the login branch in remote repo (thus login.txt file and latest commits will be visible). Now if we do "git switch registration", it will move to registration branch as well as link it. And now if we create register.txt in remote repo it will not be visible in our local repo. Now suppose we created a new branch "password" in remote repo and if we do "git branch -r" in local repo we will not be able to see password branch, but if we do "git fetch" and then "git branch -r" this will become visible as changes are fetched


	Complete Example of git fetch :- Suppose we created a github repo and it has 3 branches main, login, register. 

> Git pull will collect all the updated data from remote repo and move it to your local workspace. In this changes will be merged into the work we are doing


---------------- GIT PULL --------------

> It is somewhat similar to fetch but difference is :- Pull actually updates HEAD branch with whatever changes are retrieved from remote

> Basically :- Git pull = Git fetch + Git merge

> Command :- git pull <remote> <branch>

	Here branch is our current branch. Eg :- git pull origin master will fetch latest information from origins master branch and merge those changes into our current branch

> Pull can result in merge conflicts, thus needed to be resolved like normal merge

> Eg :- Suppose we have a remote repo with 3 branches (main[files :- Readme.md,index.txt, manu.txt], login_fix [files :- Readme.md, index.txt, manu.txt, login_fix.txt] and registration [files:Readme.md,index.txt,manu.txt,registration.txt]).Clone the project in local repo and now suppose we created a new file(main.txt) in remote repo's main branch, and now if we go to local repo and do "ls" we will not be able to see that file, so we do "git fetch" to see the changes, and then we do "git pull origin main" and thus main.txt file also gets included in local repo. Now suppose we do some changes in main.txt in local repo and make a commit , and also we do some changes in main.txt via remote repo and now if we go to our local repo and do "git pull remote origin" then this will show that there is merge conflict, so we will manually solve the merge conflict and then we will make a commit and push changes
